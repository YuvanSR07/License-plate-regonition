import tkinter as tk
from tkinter import messagebox, simpledialog
import cv2
import easyocr
from PIL import Image, ImageTk
import psycopg2
from datetime import datetime

# PostgreSQL Database connection setup
def connect_db():
    try:
        conn = psycopg2.connect(
            host="localhost",         # Database host (localhost for local PostgreSQL server)
            user="postgres",          # PostgreSQL username
            password="newpassword",   # PostgreSQL password
            database="parking"   # Database name
        )
        return conn
    except Exception as e:
        messagebox.showerror("Database Error", f"Error connecting to PostgreSQL database: {e}")
        return None

# Function to check credentials and open a new page if successful
def login():
    username = username_entry.get()
    password = password_entry.get()
    
    if username == "admin" and password == "password":
        messagebox.showinfo("Login Success", "Welcome!")
        open_new_page()
    else:
        messagebox.showerror("Login Failed", "Invalid username or password.")

# Function to retrieve and display all entries from the database
def retrieve_entries_from_db():
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()

            # Query to fetch all entries
            query = "SELECT number_plate, entry_time, exit_time FROM vehicle_entries ORDER BY entry_time DESC"
            cursor.execute(query)
            rows = cursor.fetchall()

            # Create a new window to display the results
            display_window = tk.Toplevel(root)
            display_window.title("Database Entries")
            display_window.geometry("600x400")
            display_window.config(bg="#f0f0f0")

            # Create a scrollable text widget to display data
            text_widget = tk.Text(display_window, font=("Arial", 12), bg="#ffffff", fg="#000000")
            text_widget.pack(expand=True, fill="both", padx=10, pady=10)

            # Add a header
            text_widget.insert("end", "Number Plate\t\tEntry Time\t\tExit Time\n")
            text_widget.insert("end", "-" * 60 + "\n")

            # Insert database rows into the text widget
            for row in rows:
                number_plate, entry_time, exit_time = row
                entry_time = entry_time.strftime("%Y-%m-%d %H:%M:%S") if entry_time else "N/A"
                exit_time = exit_time.strftime("%Y-%m-%d %H:%M:%S") if exit_time else "N/A"
                text_widget.insert("end", f"{number_plate}\t\t{entry_time}\t\t{exit_time}\n")

            text_widget.config(state="disabled")  # Make the text widget read-only

            cursor.close()
            conn.close()
    except Exception as e:
        messagebox.showerror("Error", f"Error retrieving entries: {e}")

# Function to open a new window with OpenCV and Database buttons
def open_new_page():
    new_window = tk.Toplevel(root)
    new_window.title("Welcome Page")
    new_window.geometry("1920x1080")
    new_window.config(bg="#f0f0f0")

    welcome_label = tk.Label(new_window, text="Welcome to the next page!", bg="#f0f0f0", font=("Arial", 24, "bold"))
    welcome_label.pack(pady=50)

    opencv_button = tk.Button(new_window, text="OpenCV", command=open_opencv_window, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white", width=20)
    opencv_button.pack(pady=20)

    database_button = tk.Button(new_window, text="View Entries", command=retrieve_entries_from_db, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white", width=20)
    database_button.pack(pady=20)

    register_exit_button = tk.Button(new_window, text="Register Exit Time", command=register_exit_time, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white", width=20)
    register_exit_button.pack(pady=20)

    check_exit_button = tk.Button(new_window, text="Check Exit Time", command=check_exit_time_for_any_vehicle, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white", width=20)
    check_exit_button.pack(pady=20)

    calculate_fee_button = tk.Button(new_window, text="Calculate Parking Fee", command=calculate_parking_fee, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white", width=20)
    calculate_fee_button.pack(pady=20)

    close_button = tk.Button(new_window, text="Close", command=new_window.destroy, font=("Arial", 16, "bold"), bg="#f44336", fg="white", width=20)
    close_button.pack(pady=50)

# Function to open the OpenCV window and start the webcam
def open_opencv_window():
    opencv_window = tk.Toplevel(root)
    opencv_window.title("OpenCV Camera")
    opencv_window.geometry("1920x1080")
    opencv_window.config(bg="#f0f0f0")

    canvas = tk.Canvas(opencv_window, width=1920, height=1080)
    canvas.pack()

    reader = easyocr.Reader(['en'])
    capture = cv2.VideoCapture(0)  # 0 is the default camera

    if not capture.isOpened():
        messagebox.showerror("Error", "Could not open webcam.")
        return

    def capture_and_save_image():
        ret, frame = capture.read()
        if ret:
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb)
            img_tk = ImageTk.PhotoImage(image=img)
            
            # Display the image in the canvas
            canvas.create_image(0, 0, anchor=tk.NW, image=img_tk)
            canvas.image = img_tk  # Keep a reference to the image

            # Use EasyOCR to extract number plate
            result = reader.readtext(frame)
            number_plate = ""
            for detection in result:
                text = detection[1]
                if len(text) > 6:  # Assuming number plates are generally longer than 6 characters
                    number_plate = text
                    break

            if number_plate:
                entry_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                messagebox.showinfo("Number Plate Detected", f"Number Plate: {number_plate}\nEntry Time: {entry_time}")
                store_entry_time(number_plate, entry_time)
            else:
                messagebox.showwarning("No Number Plate", "Could not detect number plate.")

        canvas.after(10, capture_and_save_image)

    capture_and_save_image()

    close_button = tk.Button(opencv_window, text="Close Camera", command=lambda: close_opencv(capture, opencv_window), font=("Arial", 16, "bold"), bg="#f44336", fg="white", width=20)
    close_button.pack(pady=20)

# Function to close the camera
def close_opencv(capture, opencv_window):
    capture.release()
    opencv_window.destroy()

# Function to store the entry time and number plate into the database
def store_entry_time(number_plate, entry_time):
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            query = "INSERT INTO vehicle_entries (number_plate, entry_time) VALUES (%s, %s)"
            cursor.execute(query, (number_plate, entry_time))
            conn.commit()
            messagebox.showinfo("Success", "Vehicle entry time saved.")
            cursor.close()
            conn.close()
    except Exception as e:
        messagebox.showerror("Error", f"Error saving entry time: {e}")

# Function to store the exit time of the vehicle
def store_exit_time(number_plate):
    try:
        exit_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            query = """
                UPDATE vehicle_entries
                SET exit_time = %s
                WHERE number_plate = %s
                AND exit_time IS NULL
                AND entry_time = (
                    SELECT MAX(entry_time) 
                    FROM vehicle_entries 
                    WHERE number_plate = %s
                )
            """
            cursor.execute(query, (exit_time, number_plate, number_plate))
            conn.commit()

            if cursor.rowcount > 0:
                messagebox.showinfo("Success", f"Exit time for {number_plate} saved.")
            else:
                messagebox.showwarning("Warning", f"No matching entry found for {number_plate}.")

            cursor.close()
            conn.close()
    except Exception as e:
        messagebox.showerror("Error", f"Error saving exit time: {e}")

# Function to dynamically register exit time
def register_exit_time():
    number_plate = simpledialog.askstring("Input", "Enter the number plate to register exit time:", parent=root)
    if number_plate:
        store_exit_time(number_plate)

# Function to dynamically check exit time for any vehicle
def check_exit_time_for_any_vehicle():
    number_plate = simpledialog.askstring("Input", "Enter the number plate to check exit time:", parent=root)
    if number_plate:
        check_exit_time(number_plate)

# Function to check exit time of a vehicle
def check_exit_time(number_plate):
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            query = "SELECT exit_time FROM vehicle_entries WHERE number_plate = %s ORDER BY entry_time DESC LIMIT 1"
            cursor.execute(query, (number_plate,))
            row = cursor.fetchone()
            if row and row[0]:
                exit_time = row[0].strftime("%Y-%m-%d %H:%M:%S")
                messagebox.showinfo("Exit Time", f"Exit time for {number_plate}: {exit_time}")
            else:
                messagebox.showinfo("Exit Time", f"No exit time recorded for {number_plate}.")

            cursor.close()
            conn.close()
    except Exception as e:
        messagebox.showerror("Error", f"Error checking exit time: {e}")

# Function to calculate the parking fee based on entry and exit time
def calculate_parking_fee():
    number_plate = simpledialog.askstring("Input", "Enter the number plate to calculate parking fee:", parent=root)
    if number_plate:
        calculate_fee(number_plate)
        
# Function to calculate the parking fee
def calculate_fee(number_plate):
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            query = """
                SELECT entry_time, exit_time FROM vehicle_entries
                WHERE number_plate = %s
                AND exit_time IS NOT NULL
                ORDER BY entry_time DESC LIMIT 1
            """
            cursor.execute(query, (number_plate,))
            row = cursor.fetchone()
            if row and row[0] and row[1]:
                entry_time = row[0]
                exit_time = row[1]
                time_diff = exit_time - entry_time
                hours = time_diff.total_seconds() / 3600
                fee = max(1, round(hours * 2, 2))  # Example: $2 per hour, minimum $1 charge
                messagebox.showinfo("Parking Fee", f"Parking fee for {number_plate}: ${fee}")
            else:
                messagebox.showinfo("Parking Fee", f"No valid entry/exit found for {number_plate}.")

            cursor.close()
            conn.close()
    except Exception as e:
        messagebox.showerror("Error", f"Error calculating parking fee: {e}")

# Setup the main application window
root = tk.Tk()
root.title("Parking Management System")
root.geometry("600x400")

# Login page UI elements
login_label = tk.Label(root, text="Login", font=("Arial", 24, "bold"))
login_label.pack(pady=50)

username_label = tk.Label(root, text="Username", font=("Arial", 16))
username_label.pack()
username_entry = tk.Entry(root, font=("Arial", 16))
username_entry.pack(pady=5)

password_label = tk.Label(root, text="Password", font=("Arial", 16))
password_label.pack()
password_entry = tk.Entry(root, font=("Arial", 16), show="*")
password_entry.pack(pady=5)

login_button = tk.Button(root, text="Login", command=login, font=("Arial", 16, "bold"), bg="#4CAF50", fg="white")
login_button.pack(pady=20)

root.mainloop()
